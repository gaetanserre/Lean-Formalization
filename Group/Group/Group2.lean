/-
  Created in 2024 by Ga√´tan Serr√©
-/


import Mathlib

set_option maxHeartbeats 5000000

open Set Function

variable {Œ± : Type} {A : Set Œ±} (hA : A.Infinite)

example : (A √óÀ¢ A).Infinite := Infinite.prod_left hA hA.nonempty

namespace Set

/-- Set of finite powersets. -/
def fin_powerset {Œ± : Type} (A : Set Œ±) := {S | S ‚àà ùí´ A ‚àß S.Finite}

def symm_diff {Œ± : Type} (A B : Set Œ±) := (A ‚à© B·∂ú) ‚à™ (A·∂ú ‚à© B)

end Set

theorem card_fin_powerset : ‚àÉ (f : A ‚Üí A.fin_powerset), f.Bijective := by sorry

lemma symm_diff_mem {C D : A.fin_powerset} : C.1.symm_diff D.1 ‚àà A.fin_powerset :=
  ‚ü®
  union_subset (fun _ h ‚Ü¶ C.2.1 (inter_subset_left h)) (fun _ h ‚Ü¶ D.2.1 (inter_subset_right h)),
  Finite.union (Finite.inter_of_left C.2.2 _) (Finite.inter_of_right D.2.2 _)
  ‚ü©

lemma emptyset_ss_powerset : ‚àÖ ‚àà A.fin_powerset := ‚ü®empty_subset A, finite_empty‚ü©

lemma symm_diff_eq {Œ± : Type} {C D : Set Œ±} : (C ‚à© D·∂ú) ‚à™ (C·∂ú ‚à© D) = (C ‚à™ D) ‚à© (C·∂ú ‚à™ D·∂ú) := by
  ext e
  constructor
  ¬∑ intro h
    cases h with
    | inl h =>
      rcases h with ‚ü®hC, hDc‚ü©
      exact ‚ü®mem_union_left D hC, mem_union_right C·∂ú hDc‚ü©
    | inr h =>
      rcases h with ‚ü®hCc, hD‚ü©
      exact ‚ü®mem_union_right C hD, mem_union_left D·∂ú hCc‚ü©
  rintro ‚ü®hCD, hCcDc‚ü©
  cases hCD with
  | inl hC =>
    cases hCcDc with
    | inl hCc =>
      contradiction
    | inr hDc =>
      left
      exact ‚ü®hC, hDc‚ü©
  | inr hD =>
    cases hCcDc with
    | inl hCc =>
      right
      exact ‚ü®hCc, hD‚ü©
    | inr hDc =>
      contradiction

instance : HMul A.fin_powerset A.fin_powerset A.fin_powerset where
  hMul := fun a b ‚Ü¶ ‚ü®a.1.symm_diff b.1, symm_diff_mem‚ü©

instance : One A.fin_powerset where
  one := ‚ü®‚àÖ, emptyset_ss_powerset‚ü©

instance : Inv A.fin_powerset where
  inv := fun a ‚Ü¶ a

instance : Group A.fin_powerset where
  mul := fun a b ‚Ü¶ ‚ü®a.1.symm_diff b.1, symm_diff_mem‚ü©
  mul_assoc := by
    intro R S T
    refine SetCoe.ext ?_
    rw [show (R * S * T).1 = (R.1.symm_diff S.1).symm_diff T.1 by rfl]
    rw [show (R * (S * T)).1 = R.1.symm_diff (S.1.symm_diff T.1) by rfl]
    unfold symm_diff

    -- Left hand side
    rw (config := {occs := .pos [2]}) [@symm_diff_eq Œ± R.1 S.1]
    rw [union_inter_distrib_right (R.1 ‚à© (S.1)·∂ú) ((R.1)·∂ú ‚à© S.1) (T.1)·∂ú]
    rw [compl_inter (R.1 ‚à™ S.1) ((R.1)·∂ú ‚à™ (S.1)·∂ú)]
    rw [compl_union R.1 S.1, compl_union (R.1)·∂ú (S.1)·∂ú]
    repeat rw [compl_compl]
    rw [union_inter_distrib_right ((R.1)·∂ú ‚à© (S.1)·∂ú) (R.1 ‚à© S.1) T.1]

    -- Right hand side
    rw (config := {occs := .pos [1]}) [@symm_diff_eq Œ± S.1 T.1]
    rw [inter_union_distrib_left (R.1)·∂ú (S.1 ‚à© (T.1)·∂ú) ((S.1)·∂ú ‚à© T.1)]
    rw [(inter_assoc (R.1)·∂ú S.1 (T.1)·∂ú).symm, (inter_assoc (R.1)·∂ú (S.1)·∂ú T.1).symm]
    rw [compl_inter (S.1 ‚à™ T.1) ((S.1)·∂ú ‚à™ (T.1)·∂ú)]
    rw [compl_union S.1 T.1, compl_union (S.1)·∂ú (T.1)·∂ú]
    repeat rw [compl_compl]
    rw [inter_union_distrib_left R.1 ((S.1)·∂ú ‚à© (T.1)·∂ú) (S.1 ‚à© T.1)]
    rw [(inter_assoc R.1 (S.1)·∂ú (T.1)·∂ú).symm, (inter_assoc R.1 S.1 T.1).symm]

    -- Assoc/Comm union
    set A := R.1 ‚à© (S.1)·∂ú ‚à© (T.1)·∂ú
    set B := (R.1)·∂ú ‚à© S.1 ‚à© (T.1)·∂ú
    set C := (R.1)·∂ú ‚à© (S.1)·∂ú ‚à© T.1
    set D := R.1 ‚à© S.1 ‚à© T.1
    rw [(union_assoc (A ‚à™ B) C D).symm, (union_assoc (A ‚à™ D) B C).symm]
    rw [union_right_comm A D B, union_right_comm (A ‚à™ B) C D]

  one := ‚ü®‚àÖ, emptyset_ss_powerset‚ü©
  one_mul := by
    intro a
    refine SetCoe.ext ?_
    rw [show ((1 : A.fin_powerset) * a).1 = (‚àÖ : Set Œ±).symm_diff a.1 by rfl]
    unfold symm_diff
    rw [empty_inter, compl_empty, univ_inter]
    exact empty_union a.1
  mul_one := by
    intro a
    refine SetCoe.ext ?_
    rw [show (a * 1).1 = a.1.symm_diff ‚àÖ by rfl]
    unfold symm_diff
    rw [compl_empty, inter_univ, inter_empty, union_empty]
  inv := fun a ‚Ü¶ a
  mul_left_inv := by
    intro a
    refine SetCoe.ext ?_
    rw [show (a‚Åª¬π * a).1 = a.1.symm_diff a.1 by rfl]
    rw [show (1 : A.fin_powerset).1 = ‚àÖ by rfl]
    unfold symm_diff
    rw [inter_compl_self, compl_inter_self, empty_union]


lemma f_nonempty : {(f : A ‚Üí A.fin_powerset) | Bijective f}.Nonempty := card_fin_powerset

noncomputable def f : A ‚Üí A.fin_powerset := f_nonempty.some

lemma f_mem : f ‚àà {(f : A ‚Üí A.fin_powerset) | Bijective f} := f_nonempty.some_mem

lemma f_has_inv : ‚àÉ (g : A.fin_powerset ‚Üí A), LeftInverse g f ‚àß RightInverse g f :=
  bijective_iff_has_inverse.mp f_mem

lemma f_inv_nonempty : {(g : A.fin_powerset ‚Üí A) | LeftInverse g f ‚àß RightInverse g f}.Nonempty :=
  f_has_inv

noncomputable def f_inv : A.fin_powerset ‚Üí A := f_inv_nonempty.some

noncomputable instance : HMul A A A where
  hMul := fun a b ‚Ü¶ f_inv (f a * f b)

noncomputable instance : One A where
  one := f_inv 1

noncomputable instance : Inv A.fin_powerset where
  inv := fun a ‚Ü¶ f_inv (f a)‚Åª¬π
